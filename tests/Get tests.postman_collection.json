{
	"info": {
		"_postman_id": "b5462887-5569-47b4-abaf-55144752011b",
		"name": "Get tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17915524"
	},
	"item": [
		{
			"name": "{{base.url}}/books/isbn pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for /book/isbn GET request success\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"corect isbn\", function () {\r",
							"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
							"    pm.expect(response.entries).to.haveOwnProperty(\"isbn13\");\r",
							"    pm.expect(response.entries.isbn13).to.equal(\"9780743273560\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/isbn?id=9780743273560",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"isbn"
					],
					"query": [
						{
							"key": "id",
							"value": "9780743273560",
							"description": "A working query"
						},
						{
							"key": "id",
							"value": "0012500440366",
							"description": "Should be a non-working isbn",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/isbn fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"// if no books found\r",
							"pm.test(\"status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct error\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Book not found\");\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/isbn?id=0012500440366",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"isbn"
					],
					"query": [
						{
							"key": "id",
							"value": "9780743273560",
							"description": "A working query",
							"disabled": true
						},
						{
							"key": "id",
							"value": "0012500440366",
							"description": "Should be a non-working isbn"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/author pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"corect author\", function () {\r",
							"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
							"    pm.expect(response.entries[0]).to.haveOwnProperty(\"authors\");\r",
							"    response.entries.forEach(book => {\r",
							"        pm.expect(book.authors).to.include(\"J.K. Rowling\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/author?authorName=J.K. Rowling&=",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"author"
					],
					"query": [
						{
							"key": "authorName",
							"value": "J.K. Rowling",
							"description": "working author in database"
						},
						{
							"key": "authorName",
							"value": "Jessica Audifred",
							"description": "A non-working value",
							"disabled": true
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/author fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"// if no books found\r",
							"pm.test(\"status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct error\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Book not found with that author(s)\");\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/author?authorName=Jessica Audifred",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"author"
					],
					"query": [
						{
							"key": "authorName",
							"value": "J.K. Rowling",
							"description": "working author in database",
							"disabled": true
						},
						{
							"key": "authorName",
							"value": "Jessica Audifred",
							"description": "A non-working value"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/publication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify that the status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// A dynamic check for the year; otherwise FAILS",
							"pm.test(\"Response contains the requested year\", function () {",
							"    const requestYear = pm.request.url.query.get(\"year\");",
							"    const jsonData = pm.response.json().entries;",
							"    ",
							"    jsonData.forEach(book => {",
							"        pm.expect(book.publication).to.eql(parseInt(requestYear));",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/publication?year=2001",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"publication"
					],
					"query": [
						{
							"key": "year",
							"value": "2001",
							"description": "A successful query for year"
						},
						{
							"key": "year",
							"value": "-2000",
							"description": "A failing query for year",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/publication Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"// fails if a valid year gets passed",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Body has correct error\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"message\");",
							"    pm.expect(response.message).to.equal(\"Book not found with that year\");",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/publication?year=-2000",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"publication"
					],
					"query": [
						{
							"key": "year",
							"value": "2001",
							"description": "A successful query for year",
							"disabled": true
						},
						{
							"key": "year",
							"value": "-2000",
							"description": "A failing query for year"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is reasonable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000); // Response time should be less than 2000 ms",
							"});",
							"",
							"",
							"pm.test(\"Pagination parameters are present\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('currentPage');",
							"    pm.expect(jsonData).to.have.property('pageSize');",
							"    pm.expect(jsonData).to.have.property('entries');",
							"    pm.expect(jsonData.entries).to.be.an('array');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/all?page=1",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response includes essential book information\", function () {",
							"    let jsonData = pm.response.json().entries;",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.keys('isbn13', 'authors', 'publication', 'original_title', 'title', 'ratings', 'icons');",
							"    }",
							"});",
							"",
							"pm.test(\"Handles no matches appropriately\", function () {",
							"    let jsonData = pm.response.json().entries;",
							"    if (jsonData.length === 0) {",
							"        pm.expect(pm.response.text()).to.include('No books found with the specified rating');",
							"    }",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/rating?minRating=4.08",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"rating"
					],
					"query": [
						{
							"key": "minRating",
							"value": "4.08"
						},
						{
							"key": "minRating",
							"value": "-2",
							"description": "A illegal arguement",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/title pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is within acceptable limits\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000); // Adjust based on expected performance standards",
							"});",
							"",
							"pm.test(\"corect title\", function () {",
							"    pm.expect(response).to.haveOwnProperty(\"entries\");",
							"    response.entries.forEach(book => {",
							"        pm.expect(book.title).to.include(\"The Fault in Our Stars\");",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/title?titleName=The Fault in Our Stars",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"title"
					],
					"query": [
						{
							"key": "titleName",
							"value": "Legendary Legend of Legends",
							"description": "A failing query",
							"disabled": true
						},
						{
							"key": "titleName",
							"value": "The Fault in Our Stars"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{base.url}}/books/title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"// Fails if correct title gets passed",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Body has correct error\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"message\");",
							"    pm.expect(response.message).to.equal(\"Book not found with that title\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base.url}}/books/title?titleName=Legendary Legend of Legends",
					"host": [
						"{{base.url}}"
					],
					"path": [
						"books",
						"title"
					],
					"query": [
						{
							"key": "titleName",
							"value": "Legendary Legend of Legends",
							"description": "A failing query"
						},
						{
							"key": "titleName",
							"value": "The Fault in Our Stars",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSmV3ZWwiLCJyb2xlIjo1LCJpZCI6MzcsImlhdCI6MTcxNTkxNDczNiwiZXhwIjoxNzE3MTI0MzM2fQ.jWzM-jS8UDxmjk1YfYArerf4o8MZfMvjhL-aaxZrIzY",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base.url",
			"value": "localhost:4000",
			"type": "string"
		}
	]
}